#!/usr/bin/env ruby

VERSION_LIKE_RE = [Gem::Requirement::PATTERN, /v?\d+\.\d+/, /^\h+$/].freeze

REQUIREMENTS = {
  'rails' => %w(rails/all active_support/all),
  'activerecord' => %w(active_record),
  'activesupport' => %w(active_support/all),
}.freeze

def parse_gems(args)
  args.each_with_object([]) do |arg, obj|
    matches_arg = arg.method(:match).to_proc
    if VERSION_LIKE_RE.detect(&matches_arg)
      obj[-1] << arg
    else
      obj << [arg]
    end
  end.map do |gem|
    if r = REQUIREMENTS[gem.first]
      gem << {:require => r}
    else
      gem
    end
  end
end

def template_for_gems(gems)
  require 'erb'
  @gems = gems
  ERB.new(<<-GEMFILE, 1, "-").result
begin
  require "bundler/inline"
rescue LoadError => e
  $stderr.puts "Bundler version 1.10 or later is required. Please update your Bundler"
  raise e
end

gemfile(true) do
  source 'https://rubygems.org'
  gem 'pry'
<% @gems.each do |(gem, *opts)|
    options = opts.last.is_a?(Hash) ? opts.pop : {}
    version = opts.pop -%>
  gem <%= gem.inspect %><% if version  %>, <%= version.inspect %> <% end %><% if options[:require] %>, :require => <%= options[:require] %><% end %>
<% end -%>
end
GEMFILE
end

if ARGV.empty? || %w(-h --help).include?(ARGV.first)
  puts(<<-EOH)
    EXAMPLES

    Try scripts:

    $ cat some-script.rb | pry-try

    Try gems:

    $ pry-try redis
    ... some bundling ...
    irb(main):001:0> Redis
    => Redis

    Multiple gems:

    $ pry-try redis rake

    Specific version:

    $ pry-try redis '3.1.0'

    ...or any requirement that would be understood by bundler:

    $ pry-try redis '~> 3.1.0'

    Combined with gems that don't need a specific version:

    $ pry-try redis '~> 3.1.0' rake gem_with_version '1.0'

EOH
  exit
elsif %w(-v --version).include?(ARGV.first)
  require 'pry-try'
  puts PryTry::VERSION
  exit
elsif %w(--inline).include?(ARGV.first)
  ARGV.shift
  puts template_for_gems(parse_gems(ARGV))
  exit
end

@gems = parse_gems(ARGV)

if @gems.any?
  require 'tempfile'

  @script = Tempfile.new('pry-try').tap do |f|
    File.write(f, template_for_gems(@gems).gsub(/\n+ *(?=\S)/, ';'))
  end
end

 exec %{unset BUNDLE_BIN;script=$(cat #{@script ? @script.path : ''} #{$stdin.tty? ? '' : '-'}; echo;echo '$stdin = $stdin.reopen "/dev/tty";'); printf "${script}" | pry}
